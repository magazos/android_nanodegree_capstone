import org.ajoberstar.grgit.Grgit
import org.eclipse.jgit.errors.RepositoryNotFoundException

apply plugin: 'com.android.application'
apply plugin: 'com.getkeepsafe.dexcount'

//Version information
def versionMajor = VERSION_MAJOR.toInteger()
def versionMinor = VERSION_MINOR.toInteger()
def versionPatch = VERSION_PATCH.toInteger()
def versionRevision = getRevision()

def appVersionCode = versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100
def appVersionName = "${versionMajor}.${versionMinor}.${versionPatch}"

android {
    compileSdkVersion versions.androidSdk.compile
    buildToolsVersion versions.androidSdk.buildTools
    compileOptions {
        sourceCompatibility versions.sourceCompatibility
        targetCompatibility versions.targetCompatibility
    }
    defaultConfig {
        applicationId "com.github.niltsiar.ultimatescrobbler"
        minSdkVersion versions.androidSdk.min
        targetSdkVersion versions.androidSdk.target

        versionCode appVersionCode
        versionName appVersionName

        buildConfigField "String", "LAST_FM_API_KEY", LAST_FM_API_KEY
        buildConfigField "String", "LAST_FM_API_SECRET", LAST_FM_API_SECRET
        buildConfigField "String", "TEST_USERNAME", LAST_FM_TEST_USER
        buildConfigField "String", "TEST_PASSWORD", LAST_FM_TEST_PASSWORD
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation project(':domain')
    implementation project(':data')
    implementation project(':remote')

    implementation libraries.app.appCompat

    implementation libraries.app.rxjava2
    implementation libraries.app.rxandroid
    implementation libraries.app.butterknife
    implementation libraries.app.timber
    implementation libraries.app.dagger
    implementation libraries.app.daggerSupport
    implementation libraries.app.okhttp
    implementation(libraries.app.retrofit) {
        exclude module: 'okhttp'
    }
    implementation libraries.app.retrofitMoshi
    implementation libraries.app.retrofitRx
    implementation libraries.app.moshiLazyAdapters
    implementation libraries.app.javaxInject

    debugImplementation libraries.debug.loggingInterceptor
    debugImplementation libraries.debug.oklog
    debugImplementation libraries.debug.chuck
    debugImplementation libraries.debug.stetho
    debugImplementation libraries.debug.stethoOkhttp
    debugImplementation (libraries.debug.stethoTimber) {
        exclude module: 'timber'
    }
    debugImplementation libraries.debug.leakCanary

    compileOnly libraries.app.javaxAnnotations

    annotationProcessor libraries.apt.daggerCompiler
    annotationProcessor libraries.apt.daggerProcessor
    annotationProcessor libraries.apt.butterknife
}

android.applicationVariants.all { variant ->
    if (variant.buildType.name == "debug") {
        variant.mergedFlavor.versionName += "-${versionRevision}"
    }
}

def static getRevision() {
    def revision
    try {
        revision = getGitRevision()
    } catch (RepositoryNotFoundException e) {
        revision = 0
    }
    return revision
}

def static getGitRevision() {
    def git = Grgit.open(dir: '.')
    return git.head().abbreviatedId
}
