import org.ajoberstar.grgit.Grgit
import org.eclipse.jgit.errors.RepositoryNotFoundException

apply plugin: 'com.android.application'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'io.fabric'

//Version information
def versionMajor = VERSION_MAJOR.toInteger()
def versionMinor = VERSION_MINOR.toInteger()
def versionPatch = VERSION_PATCH.toInteger()
def versionRevision = getRevision()

def appVersionCode = versionMajor * 1_000_000 + versionMinor * 1_000 + versionPatch
def appVersionName = "${versionMajor}.${versionMinor}.${versionPatch}"

android {
    compileSdkVersion versions.androidSdk.compile
    compileOptions {
        sourceCompatibility versions.sourceCompatibility
        targetCompatibility versions.targetCompatibility
    }
    defaultConfig {
        applicationId "com.github.niltsiar.ultimatescrobbler"
        minSdkVersion versions.androidSdk.min
        targetSdkVersion versions.androidSdk.target

        versionCode appVersionCode
        versionName appVersionName

        vectorDrawables.useSupportLibrary = true

        buildConfigField "String", "LAST_FM_API_KEY", LAST_FM_API_KEY
        buildConfigField "String", "LAST_FM_API_SECRET", LAST_FM_API_SECRET
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation project(':domain')
    implementation project(':data')
    implementation project(':remote')
    implementation project(':cache')

    implementation libraries.app.appCompat
    implementation libraries.app.design
    implementation libraries.app.palette
    implementation libraries.app.recyclerView
    implementation libraries.app.constraintLayout
    implementation libraries.app.flexbox
    implementation libraries.app.lifecycleExtensions
    implementation libraries.app.materialDimens
    implementation libraries.app.indicatorSeekBar

    implementation libraries.app.rxjava2
    implementation libraries.app.rxandroid
    implementation libraries.app.rxbinding
    implementation libraries.app.rxrelay
    implementation libraries.app.butterknife
    implementation libraries.app.timber
    implementation libraries.app.dagger
    implementation libraries.app.daggerSupport
    implementation libraries.app.okhttp
    implementation(libraries.app.retrofit) {
        exclude module: 'okhttp'
    }
    implementation libraries.app.retrofitMoshi
    implementation libraries.app.retrofitRx
    implementation libraries.app.moshiLazyAdapters
    implementation libraries.app.javaxInject
    implementation libraries.app.rxpreferences
    implementation libraries.app.firebaseJobDispatcher
    implementation libraries.app.threetenbp
    implementation(libraries.app.threetenabp) {
        exclude module: 'threetenbp'
    }
    implementation libraries.app.firebaseJobDispatcher
    implementation libraries.app.autoValue
    implementation libraries.app.picasso
    implementation libraries.app.chipcloud
    implementation libraries.app.firebaseCore
    implementation (libraries.app.crashlytics) {
        transitive = true
    }

    debugImplementation libraries.debug.loggingInterceptor
    debugImplementation libraries.debug.oklog
    debugImplementation libraries.debug.chuck
    debugImplementation libraries.debug.stetho
    debugImplementation libraries.debug.stethoOkhttp
    debugImplementation(libraries.debug.stethoTimber) {
        exclude module: 'timber'
    }
    debugImplementation libraries.debug.leakCanary

    compileOnly libraries.app.javaxAnnotations

    annotationProcessor libraries.apt.daggerCompiler
    annotationProcessor libraries.apt.daggerProcessor
    annotationProcessor libraries.apt.butterknife
    annotationProcessor libraries.apt.autoValue
}

apply plugin: 'com.google.gms.google-services'

android.applicationVariants.all { variant ->
    if (variant.buildType.name == "debug") {
        variant.mergedFlavor.versionName += "-${versionRevision}"
    }
}

def static getRevision() {
    def revision
    try {
        revision = getGitRevision()
    } catch (RepositoryNotFoundException e) {
        revision = 0
    }
    return revision
}

def static getGitRevision() {
    def git = Grgit.open(dir: '.')
    return git.head().abbreviatedId
}
